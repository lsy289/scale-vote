spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        - id: a-service-route
          uri: lb://A-SERVICE   # A-SERVICE로 요청을 라우팅
          predicates:
            - Path=/api/vote/**
          filters:
            - name: CircuitBreaker
              args:
                name: circuitBreakerAService

                fallbackUri: forward:/api/fallback   # 서킷 브레이커 활성화
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
                key-resolver: "#{@ipKeyResolver}"
  data:
    redis:
      host: localhost
      port: 6379
      password: redis
      lettuce:
        pool:
          max-active: 8             # 최대 활성 연결 수
          max-idle: 8               # 최대 유휴 연결 수
          min-idle: 0               # 최소 유휴 연결 수
          time-between-eviction-runs: 10s  # 유휴 연결 검사 주기

server:
  port: 8080

resilience4j:
  circuitbreaker:
    instances:
      circuitBreakerAService:
        registerHealthIndicator: true                  # 서킷 브레이커 상태를 모니터링할 수 있도록 헬스 인디케이터 등록
        slidingWindowType: COUNT_BASED                 # 슬라이딩 윈도우를 호출 횟수 기준으로 설정
        slidingWindowSize: 10                          # 슬라이딩 윈도우 크기 설정 (10번 호출 기준)
        minimumNumberOfCalls: 5                        # 최소 5번 호출이 있어야 서킷 상태를 판단
        failureRateThreshold: 20                       # 실패 비율이 20% 이상일 때 서킷을 염
        waitDurationInOpenState: 10s                   # 서킷이 열린 후 10초 동안 대기
        permittedNumberOfCallsInHalfOpenState: 3       # 반개방 상태에서 3번의 호출만 허용
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException   # 서버 에러(500번대)를 서킷 열기 조건으로 설정
          - java.util.concurrent.TimeoutException                     # 타임아웃 예외도 서킷 열기 조건

